To ensure the quality of a software system, I think the group must do some usefull method that to control the risk to the project. From this course, I summary some method we can use:

1.Unit testing must used in every line of code properly. We testing each unit of code in a single component, and keep to coverage the three type: function coverage(each function or method executed by at least one test case), statement coverage(each line of code covered by at least one test case or need more test cases) and path coverage(every possible path through code covered by at least one test case). Unit tests allow develpers to continually ensure that a unit of code does what id intended even as associated units change.

2.Functional testing ensure every function produces its expected outcome. But for our projects, it is unreasonable to test every functional aspect of the software, so we define functional testing goals that are appropriate for the project. Functional test suites are created from requirement use cases, with each scenario becoming a functional test.As a component is implemented, the respective functional test is applied to it after it has been unit tested.

3.System testing ensure all functions combine to deliver the desired business result. In system testing executes ent-to-end functional tests thar cross software units. We must focus on in integrate. Combining the various components together in one swift move should be avoided. The issue with ihis approach is the difficulty in localizing error. Components should be integrated incrementally after each has been tested in isolation.

4.Tegression testing ensure new changes did not adversely affect other parts of the system. The regression testing should include plans from the original unit, as well as functional and system tests phases to demonstrate that existing functionality behavers as intended. Although it is not desirable to test the entire system again, critical functionality should be tested regardless of where the modification occurred. Regression testing should be done frequertly to ensure a baseline software quality is maintaned.

5.System integration testing ensure the system integrates with and does not adversely affect orher enterprise systems. The testing goals will exercise required communication. This is done using process flows that encapsulate the entire system. The need for a developed system to coexist with existing enterprise applications necessitates developing testing goals thar can uncover faults in their integration. In the case that the new system is standalone software and there is no requirement for compatibility with and other enterprise system, system integration testing can be ignored.

6.Acceptance testing ensure the customer is satisfied with the system. Acceptance testing aims to test how well users interact with the system, that it does what they expect and is easy to use. But the final phase of testing before software deployment , the tests should be defined as early as possible. Early definition ensures customer expectations are set appropriately and confirms for designers thar what they are building will staisfy the end user`s requriements.To thar end, acceptance test cases are developed from user requirements and are validated in conunction with actual end users of the system.The process results in acceptance or rejection of the final product.
